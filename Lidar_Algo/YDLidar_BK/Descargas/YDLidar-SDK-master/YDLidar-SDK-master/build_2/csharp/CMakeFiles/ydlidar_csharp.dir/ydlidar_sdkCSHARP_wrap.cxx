/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ydlidar(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ydlidar(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ydlidar(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#define SWIG_FILE_WITH_INIT
#define SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
#include "../src/CYdLidar.h"
#include "../core/base/typedef.h"
#include "../core/common/ydlidar_datatype.h"
#include "../core/common/ydlidar_def.h"

SWIGINTERN std::vector< LaserPoint > *new_std_vector_Sl_LaserPoint_Sg___SWIG_2(int capacity){
        std::vector< LaserPoint >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< LaserPoint >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN LaserPoint std_vector_Sl_LaserPoint_Sg__getitemcopy(std::vector< LaserPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< LaserPoint >::value_type const &std_vector_Sl_LaserPoint_Sg__getitem(std::vector< LaserPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__setitem(std::vector< LaserPoint > *self,int index,LaserPoint const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__AddRange(std::vector< LaserPoint > *self,std::vector< LaserPoint > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< LaserPoint > *std_vector_Sl_LaserPoint_Sg__GetRange(std::vector< LaserPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< LaserPoint >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__Insert(std::vector< LaserPoint > *self,int index,LaserPoint const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__InsertRange(std::vector< LaserPoint > *self,int index,std::vector< LaserPoint > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__RemoveAt(std::vector< LaserPoint > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__RemoveRange(std::vector< LaserPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< LaserPoint > *std_vector_Sl_LaserPoint_Sg__Repeat(LaserPoint const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< LaserPoint >(count, value);
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__Reverse__SWIG_0(std::vector< LaserPoint > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__Reverse__SWIG_1(std::vector< LaserPoint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_LaserPoint_Sg__SetRange(std::vector< LaserPoint > *self,int index,std::vector< LaserPoint > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool CYdLidar_setlidaropt__SWIG_0(CYdLidar *self,int optname,int value){
    return self->setlidaropt(optname, (const void *)(&value), sizeof(int));
  }
SWIGINTERN bool CYdLidar_setlidaropt__SWIG_1(CYdLidar *self,int optname,float value){
    return self->setlidaropt(optname, (const void *)(&value), sizeof(float));
  }
SWIGINTERN bool CYdLidar_setlidaropt__SWIG_2(CYdLidar *self,int optname,bool value){
    return self->setlidaropt(optname, (const void *)(&value), sizeof(bool));
  }
SWIGINTERN bool CYdLidar_setlidaropt__SWIG_3(CYdLidar *self,int optname,std::string value){
    return self->setlidaropt(optname, (const void *)(value.c_str()),value.size());
  }
SWIGINTERN bool CYdLidar_getlidaropt_toInt(CYdLidar *self,int optname,int *optval){
    return self->getlidaropt(optname, (void *)(optval),sizeof(int));
  }
SWIGINTERN bool CYdLidar_getlidaropt_toBool(CYdLidar *self,int optname,bool *optval){
    return self->getlidaropt(optname, (void *)(optval),sizeof(bool));
  }
SWIGINTERN bool CYdLidar_getlidaropt_toFloat(CYdLidar *self,int optname,float *optval){
    return self->getlidaropt(optname, (void *)(optval),sizeof(float));
  }
SWIGINTERN bool CYdLidar_getlidaropt_toString(CYdLidar *self,int optname,std::string *optval){
    char value[200];
    bool ret = self->getlidaropt(optname, (void *)(value),200);
    *optval = value;
    return ret;
  }

#include <string.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_Clear(void * jarg1) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_Add(void * jarg1, void * jarg2) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  LaserPoint *arg2 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (LaserPoint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LaserPoint const & is null", 0);
    return ;
  } 
  (arg1)->push_back((LaserPoint const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LaserPointVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  std::vector< LaserPoint >::size_type result;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  result = ((std::vector< LaserPoint > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LaserPointVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  std::vector< LaserPoint >::size_type result;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  result = ((std::vector< LaserPoint > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  std::vector< LaserPoint >::size_type arg2 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (std::vector< LaserPoint >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserPointVector__SWIG_0() {
  void * jresult ;
  std::vector< LaserPoint > *result = 0 ;
  
  result = (std::vector< LaserPoint > *)new std::vector< LaserPoint >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserPointVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< LaserPoint > *arg1 = 0 ;
  std::vector< LaserPoint > *result = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< LaserPoint > const & is null", 0);
    return 0;
  } 
  result = (std::vector< LaserPoint > *)new std::vector< LaserPoint >((std::vector< LaserPoint > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserPointVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< LaserPoint > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< LaserPoint > *)new_std_vector_Sl_LaserPoint_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserPointVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  LaserPoint result;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_LaserPoint_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = new LaserPoint(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserPointVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  std::vector< LaserPoint >::value_type *result = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< LaserPoint >::value_type *) &std_vector_Sl_LaserPoint_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  LaserPoint *arg3 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (LaserPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LaserPoint const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_LaserPoint_Sg__setitem(arg1,arg2,(LaserPoint const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  std::vector< LaserPoint > *arg2 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (std::vector< LaserPoint > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< LaserPoint > const & is null", 0);
    return ;
  } 
  std_vector_Sl_LaserPoint_Sg__AddRange(arg1,(std::vector< LaserPoint > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserPointVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< LaserPoint > *result = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< LaserPoint > *)std_vector_Sl_LaserPoint_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  LaserPoint *arg3 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (LaserPoint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LaserPoint const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_LaserPoint_Sg__Insert(arg1,arg2,(LaserPoint const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  std::vector< LaserPoint > *arg3 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< LaserPoint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< LaserPoint > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_LaserPoint_Sg__InsertRange(arg1,arg2,(std::vector< LaserPoint > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_LaserPoint_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_LaserPoint_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserPointVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  LaserPoint *arg1 = 0 ;
  int arg2 ;
  std::vector< LaserPoint > *result = 0 ;
  
  arg1 = (LaserPoint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LaserPoint const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< LaserPoint > *)std_vector_Sl_LaserPoint_Sg__Repeat((LaserPoint const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  std_vector_Sl_LaserPoint_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_LaserPoint_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPointVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  int arg2 ;
  std::vector< LaserPoint > *arg3 = 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< LaserPoint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< LaserPoint > const & is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_LaserPoint_Sg__SetRange(arg1,arg2,(std::vector< LaserPoint > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserPointVector(void * jarg1) {
  std::vector< LaserPoint > *arg1 = (std::vector< LaserPoint > *) 0 ;
  
  arg1 = (std::vector< LaserPoint > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CYdLidar() {
  void * jresult ;
  CYdLidar *result = 0 ;
  
  result = (CYdLidar *)new CYdLidar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CYdLidar(void * jarg1) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_initialize(void * jarg1) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  result = (bool)(arg1)->initialize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_GetLidarVersion(void * jarg1, void * jarg2) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  LidarVersion *arg2 = 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (LidarVersion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LidarVersion & is null", 0);
    return ;
  } 
  (arg1)->GetLidarVersion(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_turnOn(void * jarg1) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  result = (bool)(arg1)->turnOn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_doProcessSimple(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  LaserScan *arg2 = 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (LaserScan *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "LaserScan & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->doProcessSimple(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_turnOff(void * jarg1) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  result = (bool)(arg1)->turnOff();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_disconnecting(void * jarg1) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  (arg1)->disconnecting();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CYdLidar_DescribeError(void * jarg1) {
  char * jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  char *result = 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  result = (char *)((CYdLidar const *)arg1)->DescribeError();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CYdLidar_getDriverError(void * jarg1) {
  int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  DriverError result;
  
  arg1 = (CYdLidar *)jarg1; 
  result = (DriverError)((CYdLidar const *)arg1)->getDriverError();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setWorkMode__SWIG_0(void * jarg1, int jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (bool)(arg1)->setWorkMode(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setWorkMode__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setWorkMode(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_enableSunNoise__SWIG_0(void * jarg1, unsigned int jarg2) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool arg2 ;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableSunNoise(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_enableSunNoise__SWIG_1(void * jarg1) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  (arg1)->enableSunNoise();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_enableGlassNoise__SWIG_0(void * jarg1, unsigned int jarg2) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool arg2 ;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->enableGlassNoise(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_enableGlassNoise__SWIG_1(void * jarg1) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  (arg1)->enableGlassNoise();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getUserVersion(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getUserVersion(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_setBottomPriority__SWIG_0(void * jarg1, unsigned int jarg2) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  bool arg2 ;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBottomPriority(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CYdLidar_setBottomPriority__SWIG_1(void * jarg1) {
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  
  arg1 = (CYdLidar *)jarg1; 
  (arg1)->setBottomPriority();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getDeviceInfo__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  device_info *arg2 = 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (device_info *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "device_info & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDeviceInfo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getDeviceInfo__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  std::vector< device_info_ex > *arg2 = 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (std::vector< device_info_ex > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< device_info_ex > & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getDeviceInfo(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setlidaropt__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)CYdLidar_setlidaropt__SWIG_0(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setlidaropt__SWIG_1(void * jarg1, int jarg2, float jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  float arg3 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)CYdLidar_setlidaropt__SWIG_1(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setlidaropt__SWIG_2(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)CYdLidar_setlidaropt__SWIG_2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_setlidaropt__SWIG_3(void * jarg1, int jarg2, const char * jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)CYdLidar_setlidaropt__SWIG_3(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getlidaropt_toInt(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)CYdLidar_getlidaropt_toInt(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getlidaropt_toBool(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)CYdLidar_getlidaropt_toBool(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getlidaropt_toFloat(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)CYdLidar_getlidaropt_toFloat(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CYdLidar_getlidaropt_toString(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  CYdLidar *arg1 = (CYdLidar *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  bool result;
  
  arg1 = (CYdLidar *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::string *)jarg3; 
  result = (bool)CYdLidar_getlidaropt_toString(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_os_init() {
  ydlidar::os_init();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_os_isOk() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ydlidar::os_isOk();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_os_shutdown() {
  ydlidar::os_shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_lidarPortList() {
  void * jresult ;
  SwigValueWrapper< std::map< std::string,std::string,std::less< std::string > > > result;
  
  result = ydlidar::lidarPortList();
  jresult = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_DEBUG_INDEX_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_cVer_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->cVer = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_cVer_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->cVer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_debug2_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->debug2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_debug2_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->debug2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_hfVer_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hfVer = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_hfVer_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->hfVer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_fVer_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->fVer = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_fVer_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->fVer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_month_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_month_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_day_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_day_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_year_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_year_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_numH_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->numH = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_numH_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->numH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_numL_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->numL = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_numL_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->numL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_health_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->health = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_health_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->health);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserDebug_maxIndex_set(void * jarg1, unsigned char jarg2) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LaserDebug *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->maxIndex = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaserDebug_maxIndex_get(void * jarg1) {
  unsigned char jresult ;
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  uint8_t result;
  
  arg1 = (LaserDebug *)jarg1; 
  result = (uint8_t) ((arg1)->maxIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserDebug() {
  void * jresult ;
  LaserDebug *result = 0 ;
  
  result = (LaserDebug *)new LaserDebug();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserDebug(void * jarg1) {
  LaserDebug *arg1 = (LaserDebug *) 0 ;
  
  arg1 = (LaserDebug *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_stamp_set(void * jarg1, unsigned long long jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->stamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LaserScan_stamp_get(void * jarg1) {
  unsigned long long jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  uint64_t result;
  
  arg1 = (LaserScan *)jarg1; 
  result = (uint64_t) ((arg1)->stamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_scanFreq_set(void * jarg1, float jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  float arg2 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scanFreq = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserScan_scanFreq_get(void * jarg1) {
  float jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  float result;
  
  arg1 = (LaserScan *)jarg1; 
  result = (float) ((arg1)->scanFreq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_sampleRate_set(void * jarg1, float jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  float arg2 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sampleRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserScan_sampleRate_get(void * jarg1) {
  float jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  float result;
  
  arg1 = (LaserScan *)jarg1; 
  result = (float) ((arg1)->sampleRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_points_set(void * jarg1, void * jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  std::vector< LaserPoint > *arg2 = (std::vector< LaserPoint > *) 0 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (std::vector< LaserPoint > *)jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserScan_points_get(void * jarg1) {
  void * jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  std::vector< LaserPoint > *result = 0 ;
  
  arg1 = (LaserScan *)jarg1; 
  result = (std::vector< LaserPoint > *)& ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_config_set(void * jarg1, void * jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  LaserConfig *arg2 = (LaserConfig *) 0 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (LaserConfig *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserScan_config_get(void * jarg1) {
  void * jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  LaserConfig *result = 0 ;
  
  arg1 = (LaserScan *)jarg1; 
  result = (LaserConfig *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_moduleNum_set(void * jarg1, int jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  int arg2 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->moduleNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LaserScan_moduleNum_get(void * jarg1) {
  int jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  int result;
  
  arg1 = (LaserScan *)jarg1; 
  result = (int) ((arg1)->moduleNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserScan_envFlag_set(void * jarg1, unsigned short jarg2) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (LaserScan *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->envFlag = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_LaserScan_envFlag_get(void * jarg1) {
  unsigned short jresult ;
  LaserScan *arg1 = (LaserScan *) 0 ;
  uint16_t result;
  
  arg1 = (LaserScan *)jarg1; 
  result = (uint16_t) ((arg1)->envFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserScan() {
  void * jresult ;
  LaserScan *result = 0 ;
  
  result = (LaserScan *)new LaserScan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserScan(void * jarg1) {
  LaserScan *arg1 = (LaserScan *) 0 ;
  
  arg1 = (LaserScan *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_YDLidar_lidar_set(void * jarg1, void * jarg2) {
  YDLidar *arg1 = (YDLidar *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (YDLidar *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->lidar = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_YDLidar_lidar_get(void * jarg1) {
  void * jresult ;
  YDLidar *arg1 = (YDLidar *) 0 ;
  void *result = 0 ;
  
  arg1 = (YDLidar *)jarg1; 
  result = (void *) ((arg1)->lidar);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_YDLidar() {
  void * jresult ;
  YDLidar *result = 0 ;
  
  result = (YDLidar *)new YDLidar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_YDLidar(void * jarg1) {
  YDLidar *arg1 = (YDLidar *) 0 ;
  
  arg1 = (YDLidar *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPoint_angle_set(void * jarg1, float jarg2) {
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float arg2 ;
  
  arg1 = (LaserPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserPoint_angle_get(void * jarg1) {
  float jresult ;
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float result;
  
  arg1 = (LaserPoint *)jarg1; 
  result = (float) ((arg1)->angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPoint_range_set(void * jarg1, float jarg2) {
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float arg2 ;
  
  arg1 = (LaserPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserPoint_range_get(void * jarg1) {
  float jresult ;
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float result;
  
  arg1 = (LaserPoint *)jarg1; 
  result = (float) ((arg1)->range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserPoint_intensity_set(void * jarg1, float jarg2) {
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float arg2 ;
  
  arg1 = (LaserPoint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserPoint_intensity_get(void * jarg1) {
  float jresult ;
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  float result;
  
  arg1 = (LaserPoint *)jarg1; 
  result = (float) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserPoint() {
  void * jresult ;
  LaserPoint *result = 0 ;
  
  result = (LaserPoint *)new LaserPoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserPoint(void * jarg1) {
  LaserPoint *arg1 = (LaserPoint *) 0 ;
  
  arg1 = (LaserPoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_min_angle_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_min_angle_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->min_angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_max_angle_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_max_angle_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->max_angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_angle_increment_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->angle_increment = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_angle_increment_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->angle_increment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_time_increment_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->time_increment = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_time_increment_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->time_increment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_scan_time_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scan_time = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_scan_time_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->scan_time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_min_range_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->min_range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_min_range_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->min_range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserConfig_max_range_set(void * jarg1, float jarg2) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float arg2 ;
  
  arg1 = (LaserConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->max_range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaserConfig_max_range_get(void * jarg1) {
  float jresult ;
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  float result;
  
  arg1 = (LaserConfig *)jarg1; 
  result = (float) ((arg1)->max_range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserConfig() {
  void * jresult ;
  LaserConfig *result = 0 ;
  
  result = (LaserConfig *)new LaserConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserConfig(void * jarg1) {
  LaserConfig *arg1 = (LaserConfig *) 0 ;
  
  arg1 = (LaserConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFan_stamp_set(void * jarg1, unsigned long long jarg2) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (LaserFan *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->stamp = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LaserFan_stamp_get(void * jarg1) {
  unsigned long long jresult ;
  LaserFan *arg1 = (LaserFan *) 0 ;
  uint64_t result;
  
  arg1 = (LaserFan *)jarg1; 
  result = (uint64_t) ((arg1)->stamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFan_npoints_set(void * jarg1, unsigned int jarg2) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (LaserFan *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->npoints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaserFan_npoints_get(void * jarg1) {
  unsigned int jresult ;
  LaserFan *arg1 = (LaserFan *) 0 ;
  uint32_t result;
  
  arg1 = (LaserFan *)jarg1; 
  result = (uint32_t) ((arg1)->npoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFan_points_set(void * jarg1, void * jarg2) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  LaserPoint *arg2 = (LaserPoint *) 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  arg2 = (LaserPoint *)jarg2; 
  if (arg1) (arg1)->points = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserFan_points_get(void * jarg1) {
  void * jresult ;
  LaserFan *arg1 = (LaserFan *) 0 ;
  LaserPoint *result = 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  result = (LaserPoint *) ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFan_config_set(void * jarg1, void * jarg2) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  LaserConfig *arg2 = (LaserConfig *) 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  arg2 = (LaserConfig *)jarg2; 
  if (arg1) (arg1)->config = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaserFan_config_get(void * jarg1) {
  void * jresult ;
  LaserFan *arg1 = (LaserFan *) 0 ;
  LaserConfig *result = 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  result = (LaserConfig *)& ((arg1)->config);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaserFan() {
  void * jresult ;
  LaserFan *result = 0 ;
  
  result = (LaserFan *)new LaserFan();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaserFan(void * jarg1) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_string_t_data_set(void * jarg1, char * jarg2) {
  string_t *arg1 = (string_t *) 0 ;
  char *arg2 ;
  
  arg1 = (string_t *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->data, (const char *)arg2, 50-1);
      arg1->data[50-1] = 0;
    } else {
      arg1->data[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_string_t_data_get(void * jarg1) {
  char * jresult ;
  string_t *arg1 = (string_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (string_t *)jarg1; 
  result = (char *)(char *) ((arg1)->data);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_string_t() {
  void * jresult ;
  string_t *result = 0 ;
  
  result = (string_t *)new string_t();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_string_t(void * jarg1) {
  string_t *arg1 = (string_t *) 0 ;
  
  arg1 = (string_t *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarPort_port_set(void * jarg1, void * jarg2) {
  LidarPort *arg1 = (LidarPort *) 0 ;
  string_t *arg2 ;
  
  arg1 = (LidarPort *)jarg1; 
  arg2 = (string_t *)jarg2; 
  {
    size_t ii;
    string_t *b = (string_t *) arg1->port;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((string_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LidarPort_port_get(void * jarg1) {
  void * jresult ;
  LidarPort *arg1 = (LidarPort *) 0 ;
  string_t *result = 0 ;
  
  arg1 = (LidarPort *)jarg1; 
  result = (string_t *)(string_t *) ((arg1)->port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LidarPort() {
  void * jresult ;
  LidarPort *result = 0 ;
  
  result = (LidarPort *)new LidarPort();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LidarPort(void * jarg1) {
  LidarPort *arg1 = (LidarPort *) 0 ;
  
  arg1 = (LidarPort *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarVersion_hardware_set(void * jarg1, unsigned char jarg2) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LidarVersion *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hardware = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LidarVersion_hardware_get(void * jarg1) {
  unsigned char jresult ;
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t result;
  
  arg1 = (LidarVersion *)jarg1; 
  result = (uint8_t) ((arg1)->hardware);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarVersion_soft_major_set(void * jarg1, unsigned char jarg2) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LidarVersion *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->soft_major = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LidarVersion_soft_major_get(void * jarg1) {
  unsigned char jresult ;
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t result;
  
  arg1 = (LidarVersion *)jarg1; 
  result = (uint8_t) ((arg1)->soft_major);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarVersion_soft_minor_set(void * jarg1, unsigned char jarg2) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LidarVersion *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->soft_minor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LidarVersion_soft_minor_get(void * jarg1) {
  unsigned char jresult ;
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t result;
  
  arg1 = (LidarVersion *)jarg1; 
  result = (uint8_t) ((arg1)->soft_minor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarVersion_soft_patch_set(void * jarg1, unsigned char jarg2) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (LidarVersion *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->soft_patch = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LidarVersion_soft_patch_get(void * jarg1) {
  unsigned char jresult ;
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t result;
  
  arg1 = (LidarVersion *)jarg1; 
  result = (uint8_t) ((arg1)->soft_patch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LidarVersion_sn_set(void * jarg1, void * jarg2) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t *arg2 ;
  
  arg1 = (LidarVersion *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->sn;
    for (ii = 0; ii < (size_t)16; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LidarVersion_sn_get(void * jarg1) {
  void * jresult ;
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (LidarVersion *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->sn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LidarVersion() {
  void * jresult ;
  LidarVersion *result = 0 ;
  
  result = (LidarVersion *)new LidarVersion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LidarVersion(void * jarg1) {
  LidarVersion *arg1 = (LidarVersion *) 0 ;
  
  arg1 = (LidarVersion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFanInit(void * jarg1) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  LaserFanInit(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaserFanDestroy(void * jarg1) {
  LaserFan *arg1 = (LaserFan *) 0 ;
  
  arg1 = (LaserFan *)jarg1; 
  LaserFanDestroy(arg1);
}


#ifdef __cplusplus
}
#endif

